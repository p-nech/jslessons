Примитив - это значение одно из 6 "примитивных" типов: string, number, boolean, symbol, null, undefined.

Объекты, в отличие от примитивов, могут хранить несколько значений в качестве свойств.
К тому же, переменная-объект хранит не сам объект, а ссылку на него.

Они объявляются с помощью {}. Например {name: 'Павел', age: 28}. Также объектами могут быть, например, функции.

В качестве свойств объекта можно хранить функции:

    let pavel = {
    name: "Павел",
    sayHi: function() {
        alert("Привет, дружище!");
    }
    };

pavel.sayHi(); // Привет, дружище!

Так как объекты могут хранить больше значений, соответственно ресурсов для них нужно больше.

В javascript есть возможность вызывать функции у примитивов, как будто это объекты. Для этого создается временный объект-обертка, хранящий в свойстве значение того примитива
и имеющий функции, нужные для работы с его типом (например, сделать всю строку из заглавных букв как в примере ниже).
Такие объекты называются похожим образом: String, Number, Boolean, Symbol.

    let str = "Привет";

    alert( str.toUpperCase() ); // ПРИВЕТ

"Движок JavaScript сильно оптимизирует этот процесс. Он даже может пропустить создание специального объекта. 
Однако, он всё же должен придерживаться спецификаций и работать так, как будто он его создаёт." ???

По историческим причинам в JavaScript остается возможность специально создавать обертки, например:

    let num = new Number(1);

Но такое не рекомендуется, так как может привести к ошибкам:

    alert( typeof 0 ); // "число"

    alert( typeof new Number(0) ); // "object"!

Или:

    let zero = new Number(0);

    if (zero) {
    // zero возвращает "true", так как является объектом
    alert( "zero имеет «истинное» значение?!?" );
    }

Но можно приводить значение к нужному типу с помощью функций String(), Number() или Boolean().

У null и undefined по понятным причинам нет методов и попытка их вызвать приведет к ошибке.